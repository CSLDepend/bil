/**
\page overview Overview


\section soverview1 Application data flow overview
BIL consists of two distinct toolchains:
<table><tr>
<td>\image html bildatagen.png "Toolchain for FPGA analysis"</td>
<td>The FPGA analysis toolchain is used to initially analyze a specific FPGA
type, thus enabling subsequent bitstream reversals. As input the FPGA's XDLRC
description, a bitstream targeting this device, and the XDL version of the
bitstream is needed. The results will be written into several files used by
the bitstream reversal toolchain.</td>
</tr>
<tr>
<td>\image html bilreverse.png "Toolchain for bitstream reversal"</td>
<td>The bitstream reversal toolchain takes a bitstream and reverses it to
XDL. At the moment only inter-tile PIPs will be recovered; intra-tile PIPs
and configuration options of the primitive sites are still missing. Though
technically possible, no net reconstruction is performed due to the missing
intra-tile PIPs.</td>
</tr></table>


\section soverview2 Directory structure overview
The directory structure of the whole library is as followed:
<ul>
<li><b>bin</b>: Compiled programs (and all binary output from compiler and linker).</li>
<li><b>data</b>: Data files needed by the BIL applications <i>bit2xml</i>, <i>bitextract</i>, and <i>bitreverse</i>. See also \ref dataprovided.</li>
<li><b>doc</b>: The documentation generated by doxygen.</li>
<li><b>lib</b>: The BIL static library.</li>
<li><b>project</b>: All project files (for BIL, and for doxygen)</li>
<li><b>scripts</b>: Batch files (windows only) for generating the data files, creating the testbase, and running tests.</li>
<li><b>src</b>: The source code of BIL.</li>
<li><b>test</b>: An exhaustive testbase for testing the various BIL programs. See also \ref dataprovided.</li>
</ul>

The source code folder is further subdivided into the various modules of BIL:
<ul>
<li><b>application</b>: The applications <i>bit2xml</i>, <i>bitextract</i>, and <i>bitreverse</i>.</li>
<li><b>bitfile</b>: Access to the Xilinx bitfile format.</li>
<li><b>bitstream</b>: Model of the bitfile's packetstream.</li>
<li><b>cfgdecode</b>: Decoding of raw configuration data by using a bit mapping database.</li>
<li><b>configuration</b>: Addressing of configuration memory.</li>
<li><b>correlation</b>: Correlation of a XDL design and the associated configuration raw data (in order to fill a bit mapping database).</li>
<li><b>datagen</b>: The applications <i>bitcorrelate</i>, <i>v5cfgmap_gen</i>, <i>v5data_gen</i>, <i>xdlrc_convert</i>, that create data files needed by the three main applications.</li>
<li><b>deviceinfo</b>: Container for device related data as name and ID.</li>
<li><b>exception</b>: Very basic exception class.</li>
<li><b>mappingdb</b>: The database model for holding the configuration bit mapping.</li>
<li><b>packetprocessor</b>: Packetprocessor emulator for executing the packetstream and extracting the configuration raw data.</li>
<li><b>serialization</b>: Functions for serializing various classes.</li>
<li><b>test</b>: The program <i>xdlcmp</i> for comparing two XDL designs.</li>
<li><b>util</b>: Various util functions (e.g. CRC calculation, endianess conversion, ...)</li>
<li><b>xdl</b>: XDL data model and parser.</li>
<li><b>xdlrc</b>: XDLRC data model and parser.</li>
</ul>
*/